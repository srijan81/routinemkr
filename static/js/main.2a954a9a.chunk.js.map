{"version":3,"sources":["componenets/arrayMaker.js","componenets/headMaker.js","componenets/TableTeacher.js","componenets/TableClass.js","App.js","serviceWorker.js","index.js"],"names":["ArrayMaker","dayStart","leastCount","dayEnd","traversalObject","dayArray","weekArray","index","hour","minute","value","push","JSON","parse","stringify","HeadMaker","returnVar","Ora","TableTeacher","resolveTeacher","resolveClass","whichTeacher","teacherCellUpdateData","classCellUpdateData","isSelected","setSelectedTeacher","dayOfWeek","selectedTeacher","daysOfWeeks","className","map","whichDay","periods","whichPeriod","onClick","TableClass","whichClass","isFree","setNotice","setTimeout","App","useState","notice","teacherArray","setTeacherArray","classArray","setClassArray","teacherNamesArray","setTeacherNamesArray","classNamesArray","setClassNamesArray","classIndex","forEach","name","teacherIndex","num","data","dummyClassData","dummyTeacherData","id","teacherName","prompt","dummyNames","dummyArray","length","period","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4OAAaA,G,MAAa,SAACC,EAAUC,EAAYC,GAW7C,IAHA,IAEIC,EAFAC,EAAW,GACXC,EAAY,GAEPC,EAAQ,EAAGA,EAAQ,EAAGA,IAAS,CAOpC,IANAF,EAAW,GACXD,EAAkB,CACdI,KAAMP,EAASO,KACfC,OAAQR,EAASQ,OACjBC,MAAO,QAELN,EAAgBI,KAAOL,EAAOK,MAAQJ,EAAgBK,OAASN,EAAOM,QACxEJ,EAASM,KAAKC,KAAKC,MAAMD,KAAKE,UAAUV,KACxCA,EAAgBI,MAAQN,EAAWM,KACnCJ,EAAgBK,QAAUP,EAAWO,OAClCL,EAAgBK,OAAS,KACxBL,EAAgBI,MAAQ,EACxBJ,EAAgBK,QAAU,IAGlCH,EAAUK,KAAKC,KAAKC,MAAMD,KAAKE,UAAUT,KAE7C,OAAOC,IC3BES,EAAY,SAAC,GAAoC,IAAnCd,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,OACzCC,EAAkB,CAClBI,KAAMP,EAASO,KACfC,OAAQR,EAASQ,OACjBC,MAAO,QAkBX,OAfY,WACR,IAAIM,EAAY,GAEhB,IADAA,EAAUL,KAAK,qCACTP,EAAgBI,KAAOL,EAAOK,MAAQJ,EAAgBK,OAASN,EAAOM,QACxEO,EAAUL,KAAK,sCAAQP,EAAgBI,KAAxB,aAAiCJ,EAAgBK,OAAjD,OACfL,EAAgBI,MAAQN,EAAWM,KACnCJ,EAAgBK,QAAUP,EAAWO,OAClCL,EAAgBK,OAAS,KACxBL,EAAgBI,MAAQ,EACxBJ,EAAgBK,QAAU,IAGlC,OAAOO,EAGJC,ICrBEC,EAAe,SAAC,GAAuL,IAAtLZ,EAAqL,EAArLA,UAAWa,EAA0K,EAA1KA,eAAgBC,EAA0J,EAA1JA,aAAcC,EAA4I,EAA5IA,aAAaC,EAA+H,EAA/HA,sBAAuBC,EAAwG,EAAxGA,oBAAqBtB,EAAmF,EAAnFA,SAAUC,EAAyE,EAAzEA,WAAYC,EAA6D,EAA7DA,OAAQqB,EAAqD,EAArDA,WAAYC,EAAyC,EAAzCA,mBAClKC,GAD2M,EAArBC,iBACzK,GACbC,EAAc,CAAC,SAAS,SAAS,UAAW,aAAc,WAAY,SAAU,YAOpF,OACI,yBAAKC,UAAU,sCACX,yBAAKA,UAAU,0BAAf,UAA4CV,EAAeE,KAC3D,2BAAOQ,UAAU,2BACb,+BACI,kBAAC,EAAD,CAAW5B,SAAUA,EAAUC,WAAYA,EAAYC,OAAQA,KAEnE,+BACKG,EAAUwB,KAAI,SAACzB,EAAU0B,GACtB,OACI,4BACI,+BAhBtBL,EACKE,EAAYF,KAgBMrB,EAASyB,KAAI,SAACE,EAASC,GACpB,OACA,wBAAIC,QAAS,WACmB,kBAAlBF,EAAQtB,OACda,EAAoBS,EAAQtB,MAAOqB,EAAUE,EAAa,QAC1DX,EAAsBD,EAAcU,EAAUE,EAAa,SACnC,SAAlBD,EAAQtB,MACdY,EAAsBD,EAAcU,EAAUE,EAAa,QACnC,SAAlBD,EAAQtB,OACdY,EAAsBD,EAAcU,EAAUE,EAAa,SAGnEJ,UAA8B,SAAlBG,EAAQtB,MAAkB,gCAA0D,kBAAlBsB,EAAQtB,MAAoB,cAAc,0BAAqD,kBAAlBsB,EAAQtB,MAAoBU,EAAaY,EAAQtB,OAAzD,UAAmEsB,EAAQtB,iBASrPc,EAAWH,GAAc,yBAAKQ,UAAU,8CAAf,YAA2E,yBAAKA,UAAU,6CAA6CK,QAnClJ,WAAKT,EAAmBJ,KAmC8D,gBC1CpGc,EAAa,SAAC,GAAyK,IAAxK7B,EAAuK,EAAvKA,UAAWc,EAA4J,EAA5JA,aAAcD,EAA8I,EAA9IA,eAAgBiB,EAA8H,EAA9HA,WAAYnC,EAAkH,EAAlHA,SAAUC,EAAwG,EAAxGA,WAAYC,EAA4F,EAA5FA,OAAQoB,EAAoF,EAApFA,oBAAqBD,EAA+D,EAA/DA,sBAAuBK,EAAwC,EAAxCA,gBAAiBU,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,UAC5KZ,GAAa,EACbE,EAAc,CAAC,SAAS,SAAS,UAAW,aAAc,WAAY,SAAU,YAKpF,OACI,yBAAKC,UAAU,sCACX,yBAAKA,UAAU,0BAAf,UAA4CT,EAAagB,KACzD,2BAAOP,UAAU,2BACb,+BACI,kBAAC,EAAD,CAAW5B,SAAUA,EAAUC,WAAYA,EAAYC,OAAQA,KAEnE,+BACKG,EAAUwB,KAAI,SAACzB,EAAU0B,GACtB,OACI,4BACI,+BAdtBL,EACKE,EAAYF,KAcMrB,EAASyB,KAAI,SAACE,EAASC,GACpB,OACA,wBAAIC,QAAS,WACEG,EAAOV,EAAiBI,EAAUE,GACZ,SAAlBD,EAAQtB,OACPY,EAAsBK,EAAiBI,EAAUE,EAAaG,GAC9Db,EAAoBa,EAAYL,EAAUE,EAAaN,IAE1B,kBAAlBK,EAAQtB,QACnBY,EAAsBU,EAAQtB,MAAQqB,EAAUE,EAAa,QAC7DV,EAAoBa,EAAYL,EAAUE,EAAa,UAG3DK,EAAU,kCAAD,OAAmCnB,EAAeQ,GAAlD,iBACTY,YAAW,kBAAID,EAAU,oCAAkC,OAGvET,UAAqC,kBAAlBG,EAAQtB,MAAoB,cAAc,0BAAqD,kBAAlBsB,EAAQtB,MAAoBS,EAAea,EAAQtB,OAA3D,UAAqEsB,EAAQtB,mBCmG9L8B,MAnIf,WAAgB,IAAD,EACeC,mBAAS,kCADxB,mBACNC,EADM,KACEJ,EADF,KAEPrC,EAAW,CACfO,KAAM,GACNC,OAAQ,GAEJP,EAAa,CACjBM,KAAM,EACNC,OAAQ,IAEJN,EAAS,CACbK,KAAM,GACNC,OAAQ,GAZG,EAeyBgC,mBAAS,IAflC,mBAeRE,EAfQ,KAeMC,EAfN,OAgBqBH,mBAAS,IAhB9B,mBAgBRI,EAhBQ,KAgBIC,EAhBJ,OAiBmCL,mBAAS,IAjB5C,mBAiBRM,EAjBQ,KAiBWC,EAjBX,OAkB+BP,mBAAS,IAlBxC,mBAkBRQ,EAlBQ,KAkBSC,EAlBT,OAmB+BT,mBAAS,GAnBxC,mBAmBRd,EAnBQ,KAmBSF,EAnBT,KAqDPL,EAAe,SAAC+B,GACpB,IAAInC,EAKJ,OAJAiC,EAAgBG,SAAQ,SAACC,EAAM9C,GAC1B4C,IAAe5C,IAChBS,EAAYqC,MAETrC,GAGHG,EAAiB,SAACmC,GACtB,IAAItC,EAKJ,OAJA+B,EAAkBK,SAAQ,SAACC,EAAM9C,GAC5B+C,IAAiB/C,IAClBS,EAAYqC,MAETrC,GAGHQ,EAAa,SAAC+B,GAOlB,OALGA,IAAQ5B,EACG,EAEA,GAKVU,EAAS,SAAChB,EAAcU,EAAUE,GACtC,MAA+D,SAA5DU,EAAatB,GAAcU,GAAUE,GAAavB,OAMjDa,EAAsB,SAACa,EAAYL,EAAUE,EAAauB,GAC9D,IAAIC,EAAiB7C,KAAKC,MAAMD,KAAKE,UAAU+B,IAC/CY,EAAerB,GAAYL,GAAUE,GAAavB,MAAQ8C,EAC1DV,EAAcW,IAGVnC,EAAwB,SAACD,EAAcU,EAAUE,EAAauB,GAClE,IAAIE,EAAmB9C,KAAKC,MAAMD,KAAKE,UAAU6B,IACjDe,EAAiBrC,GAAcU,GAAUE,GAAavB,MAAQ8C,EAC9DZ,EAAgBc,IAGlB,OACE,yBAAK7B,UAAU,4CACb,yBAAKA,UAAU,iEACZc,EAAab,KAAI,SAACxB,EAAWe,GAC9B,OAAQ,yBAAKQ,UAAU,QACF,IAAjBR,EAAoB,yBAAKQ,UAAU,8BAA+B,GACpE,kBAAC,EAAD,CAAcvB,UAAWA,EAAWa,eAAgBA,EAAgBC,aAAcA,EAAcC,aAAcA,EAAcC,sBAAuBA,EAAuBC,oBAAqBA,EAAqBtB,SAAUA,EAAUC,WAAYA,EAAYC,OAAQA,EAAQqB,WAAYA,EAAYC,mBAAoBA,EAAoBE,gBAAiBA,SAIrW,yBAAKE,UAAU,6CACb,yBAAK8B,GAAG,aAAa9B,UAAU,qEAA/B,UACMa,IAEN,yBAAKb,UAAU,sBACb,yBAAKA,UAAU,0HAA0HK,QA9F9H,WACjB,IAAM0B,EAAcC,OAAO,sBAC3B,GAAmB,OAAhBD,EAAH,CAEA,IAAIE,EAAalD,KAAKC,MAAMD,KAAKE,UAAUiC,IAC3Ce,EAAWnD,KAAKiD,GAChBZ,EAAqBc,GAErB,IAAIC,EAAanD,KAAKC,MAAMD,KAAKE,UAAU6B,IAC3CoB,EAAWpD,KAAKX,EAAWC,EAAUC,EAAYC,IACjDyC,EAAgBmB,MAoFV,gBACA,yBAAKlC,UAAU,qHAAqHK,QAlF3H,WACf,GAA2B,IAAxBS,EAAaqB,OAAhB,CAIA,IAAMnC,EAAYgC,OAAO,oBACrBC,EAAalD,KAAKC,MAAMD,KAAKE,UAAUmC,IAC3Ca,EAAWnD,KAAKkB,GAChBqB,EAAmBY,GACnB,IAAIC,EAAanD,KAAKC,MAAMD,KAAKE,UAAU+B,IAC3CkB,EAAWpD,KAAKX,EAAWC,EAAUC,EAAYC,IACjD2C,EAAciB,GACdlB,EAAWO,SAAQ,SAAC9C,EAAW8B,GAC7B9B,EAAU8C,SAAQ,SAAC/C,EAAU0B,GAC3B1B,EAAS+C,SAAQ,SAACa,EAAQhC,GAAT,OAAuBiC,QAAQC,IAAR,UAAeF,EAAOvD,MAAtB,uBAA0C0B,EAA1C,aAAyDL,EAAzD,aAAsEE,EAAtE,oBAZ1CK,EAAU,oCAgFN,gBAGJ,yBAAKT,UAAU,+DACZgB,EAAWf,KAAI,SAACxB,EAAW8B,GAC5B,OAAQ,yBAAKP,UAAU,QACJ,IAAfO,EAAkB,yBAAKP,UAAU,8BAA+B,GAClE,kBAAC,EAAD,CAAYvB,UAAWA,EAAWc,aAAcA,EAAcD,eAAgBA,EAAgBiB,WAAYA,EAAYnC,SAAUA,EAAUC,WAAYA,EAAYC,OAAQA,EAAQoB,oBAAqBA,EAAqBD,sBAAuBA,EAAuBK,gBAAiBA,EAAiBU,OAAQA,EAAQC,UAAWA,WCtH7T8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.2a954a9a.chunk.js","sourcesContent":["export const ArrayMaker = (dayStart, leastCount, dayEnd) => {\n    /**\n     * dayStart = {\n     *      hour: //hour of dayStart\n     *      minute: //minute of dayStart\n     * }\n     * And similar for leastCount and dayEnd\n     */\n    let dayArray = [];\n    let weekArray = [];\n    let traversalObject;\n    for (let index = 0; index < 7; index++) {\n        dayArray = [];\n        traversalObject = {\n            hour: dayStart.hour,\n            minute: dayStart.minute,\n            value: \"Free\"\n        }\n        while(traversalObject.hour < dayEnd.hour || traversalObject.minute < dayEnd.minute){\n            dayArray.push(JSON.parse(JSON.stringify(traversalObject)));\n            traversalObject.hour += leastCount.hour;\n            traversalObject.minute += leastCount.minute;\n            if(traversalObject.minute > 59){\n                traversalObject.hour += 1;\n                traversalObject.minute -= 60;\n            }\n        }\n        weekArray.push(JSON.parse(JSON.stringify(dayArray)));\n    }\n    return weekArray;\n}","import React from 'react'\n\nexport const HeadMaker = ({dayStart, leastCount, dayEnd}) => {\n    let traversalObject = {\n        hour: dayStart.hour,\n        minute: dayStart.minute,\n        value: \"Free\"\n    }\n    \n    const Ora = () => {\n        let returnVar = [];\n        returnVar.push(<th>Days</th>);\n        while(traversalObject.hour < dayEnd.hour || traversalObject.minute < dayEnd.minute){\n            returnVar.push(<th>{`${traversalObject.hour}H ${traversalObject.minute}M`}</th>);\n            traversalObject.hour += leastCount.hour;\n            traversalObject.minute += leastCount.minute;\n            if(traversalObject.minute > 59){\n                traversalObject.hour += 1;\n                traversalObject.minute -= 60;\n            }\n        }\n        return returnVar;\n    }\n\n    return Ora();\n}","import React from 'react';\nimport { HeadMaker } from './headMaker';\n\nexport const TableTeacher = ({weekArray, resolveTeacher, resolveClass, whichTeacher,teacherCellUpdateData, classCellUpdateData, dayStart, leastCount, dayEnd, isSelected, setSelectedTeacher, selectedTeacher}) => {\n    let dayOfWeek = -1;\n    let daysOfWeeks = [\"Sunday\",\"Monday\",\"Tuesday\", \"Wedsnesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n    const weekDayPrinter = () => {\n        ++dayOfWeek;\n        return daysOfWeeks[dayOfWeek];\n    }\n    const handleSelectMe = ()=>{setSelectedTeacher(whichTeacher)}\n\n    return(\n        <div className=\"tableGradient opacity-25 shadow-xl\">\n            <div className=\"text-white opacity-100\">{`${resolveTeacher(whichTeacher)}`}</div>\n            <table className=\" text-white opacity-100\">\n                <thead>\n                    <HeadMaker dayStart={dayStart} leastCount={leastCount} dayEnd={dayEnd}/>\n                </thead>\n                <tbody>\n                    {weekArray.map((dayArray, whichDay) => {\n                        return (\n                            <tr>\n                                <td>{weekDayPrinter()}</td>\n                                {dayArray.map((periods, whichPeriod)=>{\n                                    return (\n                                    <td onClick={()=>{\n                                        if(typeof periods.value === \"number\"){\n                                            classCellUpdateData(periods.value, whichDay, whichPeriod, \"Free\");\n                                            teacherCellUpdateData(whichTeacher, whichDay, whichPeriod, \"Free\");\n                                        } else if(periods.value === \"Free\"){\n                                            teacherCellUpdateData(whichTeacher, whichDay, whichPeriod, \"Busy\");\n                                        } else if(periods.value === \"Busy\"){\n                                            teacherCellUpdateData(whichTeacher, whichDay, whichPeriod, \"Free\");\n                                        }\n                                    }}\n                                    className={(periods.value === \"Busy\")?\"bg-red-700 border text-center\":(typeof periods.value === 'number')?\"text-center\":\"opacity-50 text-center\"}>{(typeof periods.value === 'number')?resolveClass(periods.value):`${periods.value}`}</td>        \n                                    )\n                                })}\n                            </tr>\n                        )\n                    })}\n                    \n                </tbody>\n            </table>\n            {isSelected(whichTeacher)?<div className=\"text-white opacity-100 text-xl text-center\">Selected</div>:<div className=\"text-white opacity-100 text-xl text-center\" onClick={handleSelectMe}>Select Me.</div>}\n        </div>\n    );\n}\n\nexport default TableTeacher;","import React from 'react';\nimport { HeadMaker } from './headMaker';\n\nexport const TableClass = ({weekArray, resolveClass, resolveTeacher, whichClass, dayStart, leastCount, dayEnd, classCellUpdateData, teacherCellUpdateData, selectedTeacher, isFree, setNotice}) => {\n    let dayOfWeek = -1;\n    let daysOfWeeks = [\"Sunday\",\"Monday\",\"Tuesday\", \"Wedsnesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n    const weekDayPrinter = () => {\n        ++dayOfWeek;\n        return daysOfWeeks[dayOfWeek]\n    }\n    return(\n        <div className=\"tableGradient opacity-25 shadow-xl\">\n            <div className=\"text-white opacity-100\">{`${resolveClass(whichClass)}`}</div>\n            <table className=\" text-white opacity-100\">\n                <thead>\n                    <HeadMaker dayStart={dayStart} leastCount={leastCount} dayEnd={dayEnd}/>\n                </thead>\n                <tbody>\n                    {weekArray.map((dayArray, whichDay) => {\n                        return (\n                            <tr>\n                                <td>{weekDayPrinter()}</td>\n                                {dayArray.map((periods, whichPeriod)=>{\n                                    return (\n                                    <td onClick={()=>{\n                                                if(isFree(selectedTeacher, whichDay, whichPeriod)){\n                                                    if(periods.value === \"Free\"){\n                                                        teacherCellUpdateData(selectedTeacher, whichDay, whichPeriod, whichClass);\n                                                        classCellUpdateData(whichClass, whichDay, whichPeriod, selectedTeacher);\n                                                    }\n                                                    else if(typeof periods.value === 'number'){\n                                                        teacherCellUpdateData(periods.value , whichDay, whichPeriod, \"Free\");\n                                                        classCellUpdateData(whichClass, whichDay, whichPeriod, \"Free\");\n                                                    }\n                                                } else {\n                                                    setNotice(`The cell for selected teacher, ${resolveTeacher(selectedTeacher)}, is \"Busy\".`);\n                                                    setTimeout(()=>setNotice('Welcome To redLazyroutinemaker'),3000);\n                                                }\n                                                }}\n                                        className={(typeof periods.value === 'number')?\"text-center\":\"opacity-50 text-center\"}>{(typeof periods.value === \"number\")?resolveTeacher(periods.value):`${periods.value}`}</td>        \n                                    )\n                                })}\n                            </tr>\n                        )\n                    })}\n                    \n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default TableClass;","import React, {useState} from 'react';\nimport \"./styles/style.css\";\nimport \"./componenets/arrayMaker.js\"\nimport { ArrayMaker } from './componenets/arrayMaker.js';\nimport {TableTeacher} from \"./componenets/TableTeacher\";\nimport {TableClass} from \"./componenets/TableClass\";\n\nfunction App() {\n  const [notice, setNotice] = useState(\"Welcome To redLazyroutinemaker\");\n  const dayStart = {\n    hour: 10,\n    minute: 0\n  };\n  const leastCount = {\n    hour: 0,\n    minute: 60\n  };\n  const dayEnd = {\n    hour: 16,\n    minute: 0\n  };\n  \n  let [teacherArray, setTeacherArray] = useState([]);\n  let [classArray, setClassArray] = useState([]);\n  let [teacherNamesArray, setTeacherNamesArray] = useState([]);\n  let [classNamesArray, setClassNamesArray] = useState([]);\n  let [selectedTeacher, setSelectedTeacher] = useState(0);\n\n  const addTeacher = () => {\n    const teacherName = prompt(\"Enter Teacher Name\");\n    if(teacherName === null)\n      return;\n    let dummyNames = JSON.parse(JSON.stringify(teacherNamesArray));\n    dummyNames.push(teacherName);\n    setTeacherNamesArray(dummyNames);\n\n    let dummyArray = JSON.parse(JSON.stringify(teacherArray));\n    dummyArray.push(ArrayMaker(dayStart, leastCount, dayEnd))\n    setTeacherArray(dummyArray);\n  }\n\n  const addClass = () => {\n    if(teacherArray.length === 0){\n      setNotice(\"Please add some teachers first\");\n      return;\n    }\n    const className = prompt(\"Enter Class Name\");\n    let dummyNames = JSON.parse(JSON.stringify(classNamesArray));\n    dummyNames.push(className);\n    setClassNamesArray(dummyNames);\n    let dummyArray = JSON.parse(JSON.stringify(classArray));\n    dummyArray.push(ArrayMaker(dayStart, leastCount, dayEnd))\n    setClassArray(dummyArray);\n    classArray.forEach((weekArray, whichClass)=>{\n      weekArray.forEach((dayArray, whichDay)=>{\n        dayArray.forEach((period, whichPeriod)=>console.log(`${period.value} classArray[${whichClass}][${whichDay}][${whichPeriod}]`))\n      })\n    })\n  }\n\n  const resolveClass = (classIndex) => {\n    let returnVar;\n    classNamesArray.forEach((name, index)=>{\n      if(classIndex === index)\n        returnVar = name;\n    })\n    return returnVar;\n  }\n\n  const resolveTeacher = (teacherIndex) => {\n    let returnVar;\n    teacherNamesArray.forEach((name, index)=>{\n      if(teacherIndex === index)\n        returnVar = name;\n    })\n    return returnVar;\n  }\n\n  const isSelected = (num) => {\n    let returnVar;\n    if(num === selectedTeacher){\n      returnVar = 1;\n    } else {\n      returnVar = 0;\n    }\n    return returnVar;\n  }\n\n  const isFree = (whichTeacher, whichDay, whichPeriod)=>{\n    if(teacherArray[whichTeacher][whichDay][whichPeriod].value === \"Busy\")\n      return false;\n    else\n      return true;\n  }\n\n  const classCellUpdateData = (whichClass, whichDay, whichPeriod, data) => {\n    let dummyClassData = JSON.parse(JSON.stringify(classArray));\n    dummyClassData[whichClass][whichDay][whichPeriod].value = data;\n    setClassArray(dummyClassData);\n  }\n\n  const teacherCellUpdateData = (whichTeacher, whichDay, whichPeriod, data) => {\n    let dummyTeacherData = JSON.parse(JSON.stringify(teacherArray));\n    dummyTeacherData[whichTeacher][whichDay][whichPeriod].value = data;\n    setTeacherArray(dummyTeacherData);\n  }\n\n  return (\n    <div className=\"backGradient w-full h-screen master-grid\">  \n      <div className=\"teacherDiv frontGradient mx-8 shadow-2xl flex overflow-x-auto\">\n        {teacherArray.map((weekArray, whichTeacher)=>{\n        return (<div className=\"flex\">\n          {(whichTeacher !== 0)?<div className=\"h-full w-16 flex-shrink-0\" />:\"\"}\n          <TableTeacher weekArray={weekArray} resolveTeacher={resolveTeacher} resolveClass={resolveClass} whichTeacher={whichTeacher} teacherCellUpdateData={teacherCellUpdateData} classCellUpdateData={classCellUpdateData} dayStart={dayStart} leastCount={leastCount} dayEnd={dayEnd} isSelected={isSelected} setSelectedTeacher={setSelectedTeacher} selectedTeacher={selectedTeacher}/>\n          </div>)\n        })}\n      </div>\n      <div className=\"buttonDivs w-full flex px-16 items-center\">\n        <div id=\"alertFeild\" className=\"flex-grow text-center text-gray-400 text-opacity-75 text-2xl py-8\">\n          {`${notice}`}\n        </div>\n        <div className=\"w-1/4 items-center\">\n          <div className=\"bg-red-700 bg-opacity-50 hover:bg-opacity-75 text-gray-500 font-semibold text-center mx-4 mt-4 mb-2 px-4 rounded shadow\" onClick={addTeacher}>+New Teacher</div>\n          <div className=\"bg-red-700 bg-opacity-50 hover:bg-opacity-75 text-gray-500 font-semibold text-center mx-4 my-2 px-4 rounded shadow\" onClick={addClass}>+New Class</div>\n        </div>\n      </div>\n      <div className=\"classDiv frontGradient mx-8 shadow-2xl flex overflow-x-auto\">\n        {classArray.map((weekArray, whichClass)=>{\n        return (<div className=\"flex\">\n          {(whichClass !== 0)?<div className=\"h-full w-16 flex-shrink-0\" />:\"\"}\n          <TableClass weekArray={weekArray} resolveClass={resolveClass} resolveTeacher={resolveTeacher} whichClass={whichClass} dayStart={dayStart} leastCount={leastCount} dayEnd={dayEnd} classCellUpdateData={classCellUpdateData} teacherCellUpdateData={teacherCellUpdateData} selectedTeacher={selectedTeacher} isFree={isFree} setNotice={setNotice}/>\n          </div>)\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}